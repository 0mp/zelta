#!/usr/bin/awk -f
#
# zmatch - compares a source and target datasets for dataset simiddlarity
#
# usage: zmatch [user@][host:]source/dataset target/dataset
#
# Reports the most recent matching snapshot and the latest snapshot of a volume ant
# its children, which can be useful in various "zfs send" and "zfs rollback" commands.
#
# Child snapshot names are provided relative to the parent. For example, when zmatch
# is called with tank/parent, tank/parent/child's snapshots will be reported as
# "/child@snapshot-name"
#
# Specifically:
#   - The latest matching snapshot and child snapshots
#   - Missing child volumes on the destination
#   - Matching snapshot names with different GUIDs
#   - Newer target snapshots not on the source
#
# ENVIRONMENT VARIABLES
#
# ZELTA_PIPE: When set to 1, we provide full snapshot names and simplify the output as
# follows:
#   - No output is provided for an up-to-date match.
#   - A single snapshot indicates the volume is missing on the target.
#   - A tab separated pair of snapshots indicates the out-of-date match and the latest.
#
# ZELTA_DEPTH: Adds "-d $ZELTA_DEPTH" to zfs list commands. Useful for limiting
# replication depth in zpull.

function snapcmd(arg) {
	# Create an appropriate ssh and zfs list command
	if (!split(arg, snap, ":")) exit
	if (snap[2]) {
		cmdpre = "ssh " snap[1] " "
		snapvol = snap[2];
	} else {
		cmdpre = ""
		snapvol = snap[1]
	}
	vollength = length(snapvol) + 1 # Get parent length for trimming 
	parent[arg] = snapvol
	return cmdpre "zfs list -Hroname,guid -Htsnap -Screation " FLAGS " '" snapvol "' 2>&1"
}

BEGIN {
	FS="\t"
	exit_code = 0
	if ("ZELTA_PIPE" in ENVIRON) { ZELTA_PIPE = ENVIRON["ZELTA_PIPE"] }
	if ("ZELTA_DEPTH" in ENVIRON) { FLAGS = "-d " ENVIRON["ZELTA_DEPTH"] " " }

	# Get snapshots for source
	while  (snapcmd(ARGV[1]) | getline) {
		if (! /@/) {
			print "error: " $0 | "cat 1>&2"
			exit_code = 1
			continue
		}
		thisSnap = substr($1, vollength)
		sendguids[thisSnap] = $2
		split(thisSnap, volSplit, "@")
		thisSubVol = volSplit[1]
		if (!(sendVolCount[thisSubVol]++)) {
			sendLatest[thisSubVol] = thisSnap
			sendOrder[++sendNum] = thisSubVol
		}
		sendsnaps[thisSubVol volCount[thisSubVol]] = thisSnap
	}
	close(snapcmd(ARGV[1]))

	# Get snapshots for destination
	while  (snapcmd(ARGV[2]) | getline) {
		if (/dataset does not exist/) { continue }
		else if (! /@/) {
			print "error: " $0 | "cat 1>&2"
			exit_code = 1
			continue
		}
		thisSnap = substr($1, vollength)
		recvguids[thisSnap] = $2
		split(thisSnap, volSplit, "@")
		thisSubVol = volSplit[1]
		thisSnapshot = volSplit[2]
		if (matches[thisSubVol]) { continue }
		recvVolCount[thisSubVol]++
		if (sendguids[thisSnap]) {
			if (sendguids[thisSnap] == recvguids[thisSnap]) {
				matches[thisSubVol]++
				if (thisSnap == sendLatest[thisSubVol]) {
					if (!ZELTA_PIPE) { print "target has latest source snapshot: " thisSnap }
				} else if (guidError[thisSubVol]) {
					print "latest common snapshot: " thisSnap | "cat 1>&2"
				} else if (recvVolCount[thisSubVol] == 1) {
					if (!ZELTA_PIPE) { printf "match: " }
					printf "@" thisSnapshot "\t"
					if (ZELTA_PIPE) { printf parent[ARGV[1]] }
					else { printf "\tsource latest: " }
					printf sendLatest[thisSubVol]
					if (ZELTA_PIPE) { printf "\t" parent[ARGV[2]] thisSubVol }
					print ""
				}
				continue
			} else {
				print "guid mismatch on: " thisSnap | "cat 1>&2"
				guidError[thisSubVol]++
			}
		} else {
			if (!(matchError[thisSubVol]++)) {
				if (sendVolCount[thisSubVol]) {
					print "target snapshot not on source: " thisSnap | "cat 1>&2"
				} else {
					# Old backups might have old child volumes, we'll suppress those in script mode
					if (!ZELTA_PIPE) { print "child volume not on source: " thisSnap | "cat 1>&2" }
				}
			}
		}
	}
	close(snapcmd(ARGV[2]))

	# List latest source snapshots for volumes not on the target
	for (i = 1; i <= sendNum; i++) {
		subvol = sendOrder[i]
		if (!(subvol in recvVolCount)) {
			if (ZELTA_PIPE) { printf parent[ARGV[1]] }
			else { printf "source only snapshot: " }
		printf sendLatest[subvol]
		if (ZELTA_PIPE) { printf "\t" parent[ARGV[2]] subvol }
		print ""
		}
	}
	exit exit_code
}
